/**
 * Don't touch this file. It will be regenerated by theia build.
 * To customize webpack configuration change D:\sources\theia-blueprint\applications\browser\webpack.config.js
 */

/**
 * Well I touched it...  This is a copy of what Theia generators would output,
 * but fixed to work with Webpack v5.
 */

// @ts-check
const path = require('path');
const webpack = require('webpack');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const CompressionPlugin = require('@theia/compression-webpack-plugin')

const outputPath = path.resolve(__dirname, 'lib');
const mode = 'production';
const staticCompression = true;
const development = false;

const monacoEditorCorePath = development ? 'D:/sources/theia-blueprint/node_modules/@theia/monaco-editor-core/dev/vs' : 'D:/sources/theia-blueprint/node_modules/@theia/monaco-editor-core/min/vs';

const plugins = [
    new CopyWebpackPlugin({
        patterns: [
            {
                from: monacoEditorCorePath,
                to: 'vs'
            }
        ]
    }),
    new webpack.ProvidePlugin({
        Buffer: ['buffer', 'Buffer'],
    }),
    new webpack.DefinePlugin({
        // *Immediate functions are not defined in the browser:
        'clearImmediate': 'clearTimeout',
        'setImmediate': 'setTimeout',
        // Someone used Node's process.env in the browser impl...
        'process.env': '{}',
    })
];
// it should go after copy-plugin in order to compress monaco as well
if (staticCompression) {
    plugins.push(new CompressionPlugin({
        // enable reuse of compressed artifacts for incremental development
        cache: development
    }));
}
plugins.push(new CircularDependencyPlugin({
    exclude: /(node_modules|examples)[\\|/]./,
    failOnError: false // https://github.com/nodejs/readable-stream/issues/280#issuecomment-297076462
}));

module.exports = {
    entry: path.resolve(__dirname, 'src-gen/frontend/index.js'),
    output: {
        filename: 'bundle.js',
        path: outputPath
    },
    target: 'web',
    mode,
    // node: {
    //     fs: 'empty',
    //     child_process: 'empty',
    //     net: 'empty',
    //     crypto: 'empty'
    // },
    module: {
        rules: [
            {
                test: /worker-main\.js$/,
                loader: 'worker-loader',
                options: {
                    filename: 'worker-ext.[fullhash].js'
                }
            },
            {
                test: /\.css$/,
                exclude: /materialcolors\.css$|\.useable\.css$/,
                use: ['style-loader', 'css-loader']
            },
            {
                test: /materialcolors\.css$|\.useable\.css$/,
                use: [
                  {
                    loader: 'style-loader/useable',
                    options: {
                      singleton: true,
                      attrs: { id: 'theia-theme' },
                    }
                  },
                  'css-loader'
                ]
            },
            {
                test: /\.(ttf|eot|svg)(\?v=\d+\.\d+\.\d+)?$/,
                loader: 'url-loader',
                options: {
                    limit: 10000,
                    mimetype: 'image/svg+xml'
                }
            },
            {
                test: /\.(jpg|png|gif)$/,
                loader: 'file-loader',
                options: {
                    name: '[hash].[ext]',
                }
            },
            {
                // see https://github.com/eclipse-theia/theia/issues/556
                test: /source-map-support/,
                loader: 'ignore-loader'
            },
            {
                test: /\.js$/,
                enforce: 'pre',
                loader: 'source-map-loader',
                exclude: /jsonc-parser|fast-plist|onigasm/
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "url-loader",
                options: {
                    limit: 10000,
                    mimetype: 'application/font-woff'
                }
            },
            {
                test: /node_modules[\\/](vscode-languageserver-types|vscode-uri|jsonc-parser)/,
                loader: 'umd-compat-loader'
            },
            {
                test: /\.wasm$/,
                loader: "file-loader",
                type: "javascript/auto",
            },
            {
                test: /\.plist$/,
                loader: "file-loader",
            },
            {
                test: /\.js$/,
                // include only es6 dependencies to transpile them to es5 classes
                include: /vscode-ws-jsonrpc|vscode-jsonrpc|vscode-languageserver-protocol|vscode-languageserver-types/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env'],
                        plugins: [
                            // reuse runtime babel lib instead of generating it in each js file
                            '@babel/plugin-transform-runtime',
                            // ensure that classes are transpiled
                            '@babel/plugin-transform-classes'
                        ],
                        // see https://github.com/babel/babel/issues/8900#issuecomment-431240426
                        sourceType: 'unambiguous',
                        cacheDirectory: true
                    }
                }
            }
        ]
    },
    resolve: {
        extensions: ['.js'],
        alias: {
            'vs': path.resolve(outputPath, monacoEditorCorePath)
        },
        fallback: {
            'child_process': false,
            'crypto': false,
            'net': false,
            'path': false,
            'process': false,
            'os': false,
            'timers': false
        }
    },
    devtool: development ? 'source-map' : false,
    plugins,
    stats: {
        warnings: true,
        children: true,
        errorDetails: true,
    }
};
